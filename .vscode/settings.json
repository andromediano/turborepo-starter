{
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    ".env": ".env*",
    "next.config.ts": "next-env.d.ts",
    "package.json": "pnpm*, .node-version, .npmrc",
    "pod.yaml": "pod.*.yaml, secret.yaml, secret.*.yaml"
  },
  // 이 설정은 모노레포(monorepo) 환경에서 매우 중요한 역할을 한다.
  // VS Code의 ESLint 확장 프로그램에게 "어느 디렉터리를 기준으로 ESLint를 실행할지" 알려주는 역할을 한다.
  // ESLint가 각 파일에 맞는 올바른 설정과 플러그인을 찾을 수 있도록, 실행 컨텍스트를 해당 파일이 속한 프로젝트의 루트 디렉터리로 변경해 준다.
  "eslint.workingDirectories": [
    {
      // 사용자가 VS Code에서 파일을 열면, ESLint 확장 프로그램은 해당 파일이 있는 위치에서부터 상위 폴더로 이동하며 package.json 파일이 있는지 탐색한다.
      // package.json을 찾으면, 그 파일이 있는 디렉터리를 ESLint의 "작업 디렉터리(working directory)"로 간주한다.
      // 해당 작업 디렉터리를 기준으로 ESLint를 실행하여, 올바른 설정 파일(eslint.config.mjs)과 node_modules에 설치된 플러그인들을 로드한다.
      "mode": "auto"
    }
  ],
  // 아래 언어들에 대해 ESLint를 활성화한다.
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  // JS/TS가 아닌 파일(JSON, MD 등)을 위한 기본 포맷터를 Prettier로 설정한다.
  // JS/TS 파일은 아래의 언어별 설정에서 ESLint로 덮어쓰므로, 이 설정은 해당 파일들에는 적용되지 않는다.
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  // 저장 시 Prettier 포맷터가 직접 실행되지 않도록 한다.
  // 대신 아래 codeActionsOnSave를 통해 ESLint가 포맷팅을 담당한다.
  "editor.formatOnSave": false,
  // 저장 시 ESLint가 자동으로 코드 문제를 수정하도록 설정한다.
  // 이 과정에서 `eslint-plugin-prettier`에 의해 Prettier 포맷팅도 함께 적용한다.
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit"
  },
  // JS/TS 파일의 수동 포맷(Cmd/Ctrl+Shift+F) 시에도 ESLint를 사용하도록 기본 포맷터를 ESLint로 지정한다.
  // 이 설정이 위의 일반 defaultFormatter 설정을 덮어쓴다.
  "[javascript]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[typescript]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
}
